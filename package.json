{
  "name": "tailwind-formatter",
  "displayName": "Tailwind Formatter",
  "description": "Customizable formatting for Tailwind CSS classes",
  "version": "1.0.0",
  "engines": {
    "vscode": "^1.96.0"
  },
  "license": "SEE LICENSE IN LICENSE.md",
  "publisher": "Myhtica",
  "author": {
    "name": "Myht",
    "email": "myht@myhtica.com"
  },
  "bugs": {
    "url": "https://github.com/myhtica/tailwind-formatter/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/myhtica/tailwind-formatter.git"
  },
  "icon": "images/icon.jpg",
  "preview": false,
  "badges": [
    {
      "url": "https://img.shields.io/badge/PRs-welcome-brightgreen.svg",
      "href": "https://github.com/myhtica/tailwind-formatter/pulls",
      "description": "PRs welcome!"
    }
  ],
  "categories": [
    "Formatters",
    "Other"
  ],
  "keywords": [
    "tailwind",
    "formatter",
    "classes",
    "css",
    "react",
    "jsx",
    "tsx",
    "tailwindcss",
    "formatting"
  ],
  "sponsor": {
    "url": "https://github.com/sponsors/myhtica-myht"
  },
  "pricing": "Free",
  "activationEvents": [
    "onLanguage:typescriptreact",
    "onLanguage:javascriptreact"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "tailwind-formatter.formatTailwindClasses",
        "title": "Format Tailwind Classes"
      }
    ],
    "languages": [
      {
        "id": "typescriptreact",
        "extensions": [
          ".tsx"
        ]
      },
      {
        "id": "javascriptreact",
        "extensions": [
          ".jsx"
        ]
      }
    ],
    "configuration": [
      {
        "id": "classes",
        "title": "Classes",
        "order": 1,
        "properties": {
          "tailwindFormatter.classes.categories": {
            "type": "object",
            "order": 1,
            "additionalProperties": {
              "type": "string"
            },
            "default": {
              "Layout": "container flex grid block inline hidden visible z- order- float- clear- object- overflow- overscroll-",
              "Sizing": "w- h- min- max-",
              "Spacing": "p- pt- pr- pb- pl- px- py- m- mt- mr- mb- ml- mx- my- space-",
              "Typography": "text- font- leading- tracking- align- whitespace- break- placeholder-",
              "Background": "bg- from- via- to-",
              "Borders": "border rounded- divide-",
              "Effects": "shadow- opacity- transition- transform- animate- cursor- pointer- resize- select- sr-"
            },
            "description": "Categories for grouping Tailwind CSS classes.\n\nItem is the category name, Value is a space-separated list of class names or prefixes.",
            "markdownDescription": "Categories for grouping Tailwind CSS classes. \n\n`Item` is the category name, `Value` is a space-separated list of class names or prefixes."
          },
          "tailwindFormatter.classes.uncategorizedPosition": {
            "type": "string",
            "order": 2,
            "enum": [
              "beforeCategorized",
              "afterCategorized"
            ],
            "default": "afterCategorized",
            "description": "Where to place uncategorized static classes relative to categorized static classes.",
            "markdownDescription": "Where to place uncategorized static classes relative to categorized static classes. \n\n This setting only applies to static classes, not dynamic classes.\n\n- `afterCategorized`: Place uncategorized classes after categorized ones  (default):\n\n    ```jsx\n    className={`\n      px-4 py-4 pt-2 pb-6 mt-4 mb-8   /* categorized */\n      unknown-class-1 unknown-class-2 /* uncategorized */\n    `}\n    ```\n- `beforeCategorized`: Place uncategorized classes before categorized ones:\n\n    ```jsx\n    className={`\n      unknown-class-1 unknown-class-2 /* uncategorized */\n      px-4 py-4 pt-2 pb-6 mt-4 mb-8   /* categorized */\n    `}\n    ```"
          }
        }
      },
      {
        "id": "viewports",
        "title": "Viewports",
        "order": 2,
        "properties": {
          "tailwindFormatter.viewports.breakpoints": {
            "type": "array",
            "order": 1,
            "items": {
              "type": "string"
            },
            "default": [
              "sm",
              "md",
              "lg",
              "xl",
              "2xl"
            ],
            "markdownDescription": "List of viewport breakpoints in order for grouping Tailwind CSS classes by.",
            "uniqueItems": true
          },
          "tailwindFormatter.viewports.grouping": {
            "type": "string",
            "order": 2,
            "enum": [
              "separate",
              "categorized",
              "inline"
            ],
            "default": "separate",
            "description": "How to group viewport-specific classes.",
            "markdownDescription": "How to group viewport-specific classes.\n\n- `separate`: Group by viewport only (default):\n\n    ```jsx\n    className={`\n      p-4 m-2 text-sm\n      sm:p-3 sm:m-3 sm:text-base\n      lg:p-4 lg:m-4 lg:text-lg\n    `}\n    ```\n\n- `separate-categorized`: Group by viewport with categories inside each viewport:\n\n    ```jsx\n    className={`\n      p-4 m-2\n      text-sm\n      sm:p-3 sm:m-3\n      sm:text-base\n      lg:p-4 lg:m-4\n      lg:text-lg\n    `}\n    ```\n\n- `inline`: Group by category with viewport variations inline:\n\n    ```jsx\n    className={`\n      p-4 sm:p-3 lg:p-4\n      m-2 sm:m-3 lg:m-4\n      text-sm sm:text-base lg:text-lg\n    `}\n    ```"
          }
        }
      },
      {
        "id": "line-formatting",
        "title": "Line Formatting",
        "order": 3,
        "properties": {
          "tailwindFormatter.lineFormatting.multiLineClasses": {
            "type": "boolean",
            "order": 1,
            "default": true,
            "description": "When true, always format Tailwind classes on multiple lines. When false, classes may be placed on a single line if under the threshold length."
          },
          "tailwindFormatter.lineFormatting.multiLineClassThreshold": {
            "type": "number",
            "order": 2,
            "default": 40,
            "description": "Format Tailwind classes on multiple lines when width exceeds this number. Only applies when `multiLineClasses` is false. Set to a high number to always place classes on a single line."
          }
        }
      },
      {
        "id": "indentation",
        "title": "Indentation",
        "order": 5,
        "properties": {
          "tailwindFormatter.indentation.usesTabs": {
            "type": "boolean",
            "order": 1,
            "default": false,
            "description": "Use tabs for indentation instead of spaces."
          },
          "tailwindFormatter.indentation.tabSize": {
            "type": "number",
            "order": 2,
            "default": 2,
            "description": "Number of spaces to use for indentation."
          }
        }
      },
      {
        "id": "prettier",
        "title": "Prettier",
        "order": 6,
        "properties": {
          "tailwindFormatter.prettier.useProjectPrettierConfig": {
            "type": "boolean",
            "order": 1,
            "default": true,
            "description": "When true, uses your project's Prettier config (.prettierrc) if available. When false, uses the extension's Prettier config below.",
            "markdownDescription": "When `true`, uses your project's Prettier config (`.prettierrc`) if available. When `false`, uses the extension's Prettier config."
          },
          "tailwindFormatter.prettier.config": {
            "type": "object",
            "order": 2,
            "default": {
              "parser": "typescript",
              "printWidth": 80,
              "quoteProps": "preserve",
              "endOfLine": "auto"
            },
            "description": "Prettier configuration for the extension. \n\n This configuration must be edited in settings.json. It will also be overridden by project-level Prettier config if `tailwindFormatter.prettier.useUserConfig` is true."
          }
        }
      }
    ]
  },
  "scripts": {
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "check-types": "tsc --noEmit",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "vscode:prepublish": "npm run package",
    "lint": "eslint src",
    "format": "prettier --write 'src/**/*.{ts,tsx,js,jsx}' || exit 0",
    "watch-tests": "tsc -p . -w --outDir out",
    "clean-test-files": "node -e \"const{readdirSync,unlinkSync}=require('fs'),{join}=require('path');const testsDir='src/test/test-files';const cleanFormatted=(dir)=>{readdirSync(dir,{withFileTypes:true}).forEach(f=>{const p=join(dir,f.name);f.isDirectory()?cleanFormatted(p):f.name.endsWith('.formatted.tsx')&&unlinkSync(p)})};cleanFormatted(testsDir)\"",
    "compile-tests": "tsc -p . --outDir out",
    "pretest": "npm run clean-test-files && npm run compile-tests && npm run compile && npm run lint",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/babel__core": "^7.20.5",
    "@types/babel__traverse": "^7.20.6",
    "@types/mocha": "^10.0.8",
    "@types/node": "20.x",
    "@types/react": "^19.0.8",
    "@types/vscode": "^1.96.0",
    "@typescript-eslint/eslint-plugin": "^8.7.0",
    "@typescript-eslint/parser": "^8.7.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "esbuild": "^0.25.1",
    "eslint": "^9.11.1",
    "npm-run-all": "^4.1.5",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "typescript": "^5.6.2"
  },
  "dependencies": {
    "@babel/core": "^7.26.8",
    "@babel/preset-react": "^7.26.3",
    "@babel/preset-typescript": "^7.26.0",
    "@babel/traverse": "^7.26.8",
    "@babel/types": "^7.26.8",
    "prettier": "^3.5.1"
  }
}
